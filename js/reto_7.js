'use strict';
/*
En los almacenes de Pap√° Noel est√°n haciendo inventario. Hay tres almacenes (que se representa cada uno como un Array). En cada almac√©n hay regalos.

Nos han pedido que escribamos un programa que nos diga qu√© regalos hay que comprar para reponer en nuestros almacenes ahora que se acerca la Navidad. Un regalo se tiene que reponer cuando s√≥lo hay stock en uno de los tres almacenes.

Por ejemplo, si tenemos los siguientes almacenes:

const a1 = ['bici', 'coche', 'bici', 'bici']
const a2 = ['coche', 'bici', 'mu√±eca', 'coche']
const a3 = ['bici', 'pc', 'pc']

El almac√©n a1 tiene "bici" y "coche".
El almac√©n a2 tiene "coche", "bici" y "mu√±eca".
El almac√©n a3 tiene "bici" y "pc".

El regalo "mu√±eca" y "pc" s√≥lo est√°n en los almacenes a2 y a3 respectivamente.

const gifts = getGiftsToRefill(a1, a2, a3) // ['mu√±eca', 'pc']

Como ves, los almacenes pueden tener el mismo regalo repetido varias veces. Pero, por m√°s existencias que haya en un almac√©n, si no tenemos en los otros dos, debemos reponerlo para tener mejor distribuci√≥n.

üìù Summary
Crea una funci√≥n getGiftsToRefill que reciba tres Array como par√°metros.
La funci√≥n debe devolver un Array con los regalos que hay que reponer.
Un regalo se debe reponer cuando s√≥lo hay stock en uno de los tres almacenes.
Si no hay ning√∫n regalo que reponer, la funci√≥n debe devolver un Array vac√≠o.
Si hay m√°s de un regalo que reponer, la funci√≥n debe devolver un Array con todos los regalos que hay que reponer.
*/
function getGiftsToRefill(a1, a2, a3) {
  const allGifts = [
    ...[...new Set(a1)],
    ...[...new Set(a2)],
    ...[...new Set(a3)],
  ];
  const countedAllGifts = allGifts.reduce((countObject, gift) => {
    const currCount = countObject[gift] ?? 0;
    return { ...countObject, [gift]: currCount + 1 };
  }, {});
  const result = [];
  for (const [key, value] of Object.entries(countedAllGifts)) {
    if (value === 1) result.push(key);
  }
  return result;
}
const a1 = ['bici', 'coche', 'bici', 'bici'];
const a2 = ['coche', 'bici', 'coche', 'doll'];
const a3 = ['bici', 'mac studio', 'mac studio'];
console.log(getGiftsToRefill(a1, a2, a3));

//Mi soluci√≥n no funciona en la plataforma de Midudev porque a√∫n no soportar el nullish operator ??
//Pueden ver otra soluci√≥n en https://github.com/Achalogy/advent-js-2022/
